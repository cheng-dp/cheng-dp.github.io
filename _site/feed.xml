<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-16T20:53:43+08:00</updated><id>http://localhost:4000/</id><title type="html">东平的博客</title><subtitle>一只成长中的程序猿</subtitle><author><name>&gt;&gt;&gt;程东平&lt;&lt;&lt;</name><email>dpchengx@gmail.com</email></author><entry><title type="html">Java内存区域及内存溢出</title><link href="http://localhost:4000/java/java-memory-exception/" rel="alternate" type="text/html" title="Java内存区域及内存溢出" /><published>2018-05-16T10:10:10+08:00</published><updated>2018-05-16T10:10:10+08:00</updated><id>http://localhost:4000/java/java-memory-exception</id><content type="html" xml:base="http://localhost:4000/java/java-memory-exception/">&lt;h3 id=&quot;堆溢出&quot;&gt;堆溢出&lt;/h3&gt;
&lt;p&gt;Java堆用于存储对象实例，只要不断地创建对象，并且保证GC Roots到对象之间有可达路径避免垃圾回收，当到达最大堆的容量限制后就会产生Java.lang.OutOfMemoryError.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * VM Options:
 * -Xms20M
 * -Xmx20M
 * -XX:+HeapDumpOnOutOfMemoryError
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeapOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果：
GC多次执行后触发OutOfMemoryError.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pictures-1255802956.cos.ap-chengdu.myqcloud.com/BLOG/HeapOutOfMemory.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;栈溢出&quot;&gt;栈溢出&lt;/h3&gt;
&lt;p&gt;关于虚拟机栈，在Java规范中描述了两种异常：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。&lt;/li&gt;
  &lt;li&gt;如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然而，在单线程下，虚拟机在栈空间不足时会尝试扩展栈空间，因此，当无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其实是一回事。在实验中，单线程环境下，只会抛出StackOverflowError异常。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * VM Option:
 * -Xss160K
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaVMStackSOF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackLeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stackLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stackLeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JavaVMStackSOF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVMStackSOF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stackLeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stack length:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stackLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果：
&lt;img src=&quot;https://pictures-1255802956.cos.ap-chengdu.myqcloud.com/BLOG/Multi-threadOutOfMemory.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;操作系统分配给每个进程的内存是有限制的，通常为&lt;code class=&quot;highlighter-rouge&quot;&gt;操作系统限制总内存-最大堆容量(Xmx)-最大方法区容量(MaxPermSize)-程序计数器消耗&lt;/code&gt;。每个线程分配到的栈容量越大，可以建立的线程数目越小。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * VM Options:
 * -Xss2M
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaVMStackOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dontStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackLeakByThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dontStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JavaVMStackOOM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVMStackOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stackLeakByThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果：
&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception in thread &quot;main&quot; java.lang.outOfMemoryError: unable to create new native thread&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;运行时常量池溢出&quot;&gt;运行时常量池溢出&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;运行时常量池在JDK 1.6及之前版本中在方法区中，在1.7及之后转移至堆空间&lt;/strong&gt;。在JDK 1.6及之前版本中可以通过限制方法区大小，从而间接限制运行时常量池大小。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;/**&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONLY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORKS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JDK&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Options:&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;XX:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PermSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;XX:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPermSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RuntimeConstantPoolOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果：
&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception in thread &quot;main&quot; java.lang.OutOfMemoryError:PermGen space&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;方法区溢出&quot;&gt;方法区溢出&lt;/h3&gt;
&lt;p&gt;方法区用于存放Class相关信息，因此要使得方法区溢出，除了在JDK 1.7之前使运行时常量池溢出外，基本的思路是运行时生成大量的类去填满方法区。
结果
&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception in thread &quot;main&quot; java.lang.OutOfMemoryError:PermGen space&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;直接内存directmemory溢出&quot;&gt;直接内存(DirectMemory)溢出&lt;/h3&gt;
&lt;p&gt;直接内存不是虚拟机运行时数据区的一部分。在JDK 1.4中新加入了NIO(New Input/Output)类，引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式，使用Native函数库直接分配堆外内存。&lt;br /&gt;
DirectMemory容量可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-XX: MaxDirectMemorySize&lt;/code&gt;指定，如果不指定，则默认与Java堆最大值一样(-Xmx)。直接通过allocateMemory可以造成本机内存溢出。&lt;/p&gt;

&lt;p&gt;结果：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception in thread &quot;main&quot; java.lang.OutOfMemoryError&lt;/code&gt;&lt;br /&gt;
直接内存溢出的一个特征是Heap Dump文件中不会看先明显的异常指示。如果OOM之后Dump文件很小，而程序中又直接或间接使用了DIO，就应该检查是否直接内存溢出。&lt;/p&gt;

&lt;h3 id=&quot;stringintern&quot;&gt;String.intern()&lt;/h3&gt;
&lt;p&gt;String.intern()是一个Native方法，作用是：如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象，否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RuntimeConstantPoolOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;计算机&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;软件&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//JDK 1.6 false JDK 1.7 true&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;va&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//JDK 1.6 false JDK 1.7 true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在JDK 1.6中，intern()方法会把首次遇到的字符串实例复制到永久代(方法区运行时常量池)，返回的是这个永久代中这个字符串实例的引用，而由StringBuilder创建的字符串实例在Java堆上，所以必然不是同一个引用。&lt;br /&gt;
在JDK 1.7中，intern()实现不会再复制，只是在常量池中记录首次出现的实例引用，因此intern()返回的引用和由StringBuilder创建的那个字符串实例是同一个。&lt;/p&gt;

&lt;h3 id=&quot;小节&quot;&gt;小节&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;内存区域&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;VM Option&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;异常&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;程序计数器&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;略&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;略&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;略&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;虚拟机栈&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;存放编译器可知的各种基本类型，对象引用和returnAddress类型&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-Xss160K 每个线程的栈大小&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;StackOverflowError/OutOfMemoryError&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java堆&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;存放对象实例&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-Xms10M 最大值&lt;br /&gt; -Xmx20M 最小值&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OutOfMemory: Java heap space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;运行时常亮池&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;存放编译期生成的字面量和符号引用，运行期也能放入常量池(string.intern())。JDK 1.7之前在方法区中，JDK 1.7及之后移至堆中&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;随方法区或堆设置&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OutOfMemoryError&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;方法区&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;存储虚拟机加载的类信息、常亮、静态变量、即时编译器编译后的代码等数据，&lt;strong&gt;又称为永久代(Permanent Generation)&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-XX:PermSize=10M 初始值&lt;br /&gt; -XX:MaxPermSize=20M 最大值&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OutOfMemoryError: PermGen space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;直接内存&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在JDK 1.4中加入NIO类，直接分配堆外内存&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-XX:MaxDirectMemorySize=10M,&lt;br /&gt; 如果不指定默认与-Xmx一样&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OutOfMemoryError&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>&gt;&gt;&gt;程东平&lt;&lt;&lt;</name><email>dpchengx@gmail.com</email></author><category term="java" /><summary type="html">堆溢出 Java堆用于存储对象实例，只要不断地创建对象，并且保证GC Roots到对象之间有可达路径避免垃圾回收，当到达最大堆的容量限制后就会产生Java.lang.OutOfMemoryError. /** * VM Options: * -Xms20M * -Xmx20M * -XX:+HeapDumpOnOutOfMemoryError */ public class HeapOOM{ static class OOMObject{} public static void main(String[] args){ List&amp;lt;OOMObject&amp;gt; list = new ArrayList&amp;lt;OOMObject&amp;gt;(); while(true){ list.add(new OOMObject()); } } } 结果： GC多次执行后触发OutOfMemoryError.</summary></entry><entry><title type="html">Github pages + Minimal-Mistakes + Disqus建立个人博客</title><link href="http://localhost:4000/tools/build-github-pages/" rel="alternate" type="text/html" title="Github pages + Minimal-Mistakes + Disqus建立个人博客" /><published>2018-05-05T10:10:10+08:00</published><updated>2018-05-05T10:10:10+08:00</updated><id>http://localhost:4000/tools/build-github-pages</id><content type="html" xml:base="http://localhost:4000/tools/build-github-pages/">&lt;p&gt;本文详细记录了利用Github pages建立个人博客的步骤。&lt;/p&gt;

&lt;p&gt;github pages官方推荐使用Jekyll生成静态网页，jekyll支持各种不同的主题，Minimal-Mistakes是一个功能比较齐全的主题，除了外观设置外，还支持文章评论、文章搜索、文章标签、文章分类。&lt;/p&gt;

&lt;h3 id=&quot;安装github-pages--jekyll&quot;&gt;安装Github pages + Jekyll&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;参考&lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages主页&lt;/a&gt;在github建立名为{username}.github.io的repository&lt;/li&gt;
  &lt;li&gt;clone &lt;code class=&quot;highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt;到本地&lt;/li&gt;
  &lt;li&gt;本地安装jekyll并建立博客
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //安装jekyll
 gem install jekyll bundler
 //建立myblog并复制内容到根目录后删除myblog
 //如果直接在根目录建立，github在编译时可能会软连接错误，暂不知原因
 &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.github.io
 jekyll new myblog
 &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
 cp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ../
 &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
 rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用minimal-mistakes主题&quot;&gt;使用Minimal-Mistakes主题&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;修改Gemfile:&lt;br /&gt;
 替换&lt;code class=&quot;highlighter-rouge&quot;&gt;gem &quot;jekyll&quot;&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;gem &quot;github-pages&quot;， group: :jekyll_plugins&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改_config.yml:&lt;br /&gt;
 中替换&lt;code class=&quot;highlighter-rouge&quot;&gt;theme&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;remote_theme: &quot;mmistakes/minimal-mistakes&quot;&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;更新主题&lt;/li&gt;
  &lt;li&gt;更改&lt;code class=&quot;highlighter-rouge&quot;&gt;about.md&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts/0000-00-00-welcome-to-jekyll.markdown&lt;/code&gt; 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt; single&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;在根目录下删除&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;，添加&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;，内容如下：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 layout: home
 author_profile: true
 ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;br /&gt;
 如果碰到&lt;code class=&quot;highlighter-rouge&quot;&gt;No GitHub API authentication could be found.&lt;/code&gt;的问题，参考&lt;a href=&quot;http://idratherbewriting.com/documentation-theme-jekyll/mydoc_install_jekyll_on_mac.html#githuberror&quot;&gt;Resolve ERRORS&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;访问&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:4000&lt;/code&gt;查看页面&lt;/li&gt;
  &lt;li&gt;push到github，访问commits页面查看部署状态。&lt;/li&gt;
  &lt;li&gt;访问&lt;code class=&quot;highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt;查看博客主页。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;配置相关选项&quot;&gt;配置相关选项&lt;/h3&gt;
&lt;p&gt;在_config.yml中可以对主题进行配置。参考&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/configuration/&quot;&gt;Configurations&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;minimal_mistakes_skin 配置主题皮肤&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;locale: zh-CN&lt;/code&gt; 配置语言&lt;/li&gt;
  &lt;li&gt;title， name， bio等个人信息&lt;/li&gt;
  &lt;li&gt;添加tags和category页面，_config.yml中配置：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; category_archive:
   type: liquid
   path: /categories/
 tag_archive:
   type: liquid
   path: /tags/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;建立文件&lt;strong&gt;tags/tag-archive.md&lt;/strong&gt;:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 title: &quot;文章标签&quot;
 permalink: /tags/
 layout: tags
 author_profile: true
 ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;建立文件&lt;strong&gt;categories/category-archive.md&lt;/strong&gt;:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 title: &quot;文章分类&quot;
 layout: categories
 permalink: /categories/
 author_profile: true
 ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;打开搜索
 search : true&lt;/li&gt;
  &lt;li&gt;建立导航栏&lt;br /&gt;
a. 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle show jekyll&lt;/code&gt;找到gem的安装位置，我本机在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/lib/ruby/gems/2.4.0/gems/jekyll-3.7.3&lt;/code&gt;。  &lt;br /&gt;
b. 进入&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/lib/ruby/gems/2.4.0/gems&lt;/code&gt;，进入 &lt;code class=&quot;highlighter-rouge&quot;&gt;minimal-mistakes-jekyll-{version}&lt;/code&gt; 文件夹，复制 &lt;em&gt;_data&lt;/em&gt; 到博客根目录。&lt;br /&gt;
c. 进入复制得到的_data文件夹，修改navigation.yml文件。添加&lt;strong&gt;分类&lt;/strong&gt;及&lt;strong&gt;标签&lt;/strong&gt;导航栏。
 ```
 # main links
 main:
    &lt;ul&gt;
      &lt;li&gt;title: “分类”
  url: /categories/&lt;/li&gt;
      &lt;li&gt;title: “标签”
  url: /tags/
 ```&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;修改markdown-高亮配色&quot;&gt;修改Markdown 高亮配色&lt;/h3&gt;
&lt;p&gt;Jekyll使用rough作为代码高亮工具，不同的皮肤设置(minimal_mistakes_skin)有不同的高亮配色，这里我使用&lt;em&gt;contrast&lt;/em&gt;皮肤，但代码高亮希望将背景从深色改为白色。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在gems目录&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/lib/ruby/gems/2.4.0/gems/minimal-mistakes-jekyll-{version}&lt;/code&gt;下复制 &lt;strong&gt;_sass&lt;/strong&gt; 到博客根目录。&lt;/li&gt;
  &lt;li&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;_sass/minimal-mistakes/skins/_contrast.scss&lt;/code&gt;，替换 &lt;em&gt;syntax highlighting (base16)&lt;/em&gt; 设置，参考&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/stylesheets/#colors&quot;&gt;Sylesheet/Color&lt;/a&gt;。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; /* solarized light syntax highlighting (base16) */
 $base00: #fafafa !default;
 $base01: #073642 !default;
 $base02: #586e75 !default;
 $base03: #657b83 !default;
 $base04: #839496 !default;
 $base05: #586e75 !default;
 $base06: #eee8d5 !default;
 $base07: #fdf6e3 !default;
 $base08: #dc322f !default;
 $base09: #cb4b16 !default;
 $base0a: #b58900 !default;
 $base0b: #859900 !default;
 $base0c: #2aa198 !default;
 $base0d: #268bd2 !default;
 $base0e: #6c71c4 !default;
 $base0f: #d33682 !default;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;添加disqus评论支持&quot;&gt;添加Disqus评论支持&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;参考&lt;a href=&quot;https://disqus.com/profile/signup/intent/&quot;&gt;I want to install disqus on my site&lt;/a&gt;注册，添加网站并得到shortname。&lt;/li&gt;
  &lt;li&gt;设置_config.yml
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; comments:
 provider: &quot;disqus&quot;
 disqus:
     shortname: &quot;your-disqus-shortname&quot;
 //......
 default:
     comments: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;设置文字大小&quot;&gt;设置文字大小&lt;/h3&gt;
&lt;p&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass/minimal-mistakes/_variables.scss&lt;/code&gt; 对应font-size。&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/quickstart/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;Minimal-Mistakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://disqus.com/profile/signup/intent/&quot;&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>&gt;&gt;&gt;程东平&lt;&lt;&lt;</name><email>dpchengx@gmail.com</email></author><category term="github-pages" /><summary type="html">本文详细记录了利用Github pages建立个人博客的步骤。</summary></entry><entry><title type="html">Commitizen + cz-customizable配置git commit message</title><link href="http://localhost:4000/tools/commitizen/" rel="alternate" type="text/html" title="Commitizen + cz-customizable配置git commit message" /><published>2018-05-01T10:10:10+08:00</published><updated>2018-05-01T10:10:10+08:00</updated><id>http://localhost:4000/tools/commitizen</id><content type="html" xml:base="http://localhost:4000/tools/commitizen/">&lt;h3 id=&quot;起因&quot;&gt;起因&lt;/h3&gt;
&lt;p&gt;团队对提交的commit message格式有约定俗称的要求，但是没有一个统一的规范，导致大家提交的commit message或多或少不太一样。因此，需要一个工具来帮助大家统一commit message的格式，也方便后续的分析和拓展。&lt;/p&gt;
&lt;h3 id=&quot;commitizen&quot;&gt;commitizen&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/commitizen/cz-cli&quot;&gt;commitizen&lt;/a&gt; 是一个帮助规范commit message的工具。安装后的效果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pictures-1255802956.cos.ap-chengdu.myqcloud.com/BLOG/commitizen-gif.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;安装commitizen&quot;&gt;安装commitizen&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; commitizen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;安装adapter&quot;&gt;安装adapter&lt;/h5&gt;
&lt;p&gt;commitizen根据不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;adapter&lt;/code&gt;配置commit message。例如，要使用Angular的commit message格式，可以安装&lt;code class=&quot;highlighter-rouge&quot;&gt;cz-conventional-changelog&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g cz-conventional-changelog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo '{ &quot;path&quot;: &quot;cz-conventional-changelog&quot; }' &amp;gt; ~/.czrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;现在，进入任何git repository, 使用git cz代替git commit提交commit。&lt;/p&gt;

&lt;h3 id=&quot;cz-customizable&quot;&gt;cz-customizable&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/leonardoanalista/cz-customizable&quot;&gt;&lt;strong&gt;cz-customizable&lt;/strong&gt;&lt;/a&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;cz-conventional-changelog&lt;/code&gt;一样，也是commitizen的adapter，不过支持一定程度上的自定义。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g cz-customizable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo '{ &quot;path&quot;: &quot;cz-customizable&quot; }' &amp;gt; ~/.czrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接着，在home目录下创建 &lt;strong&gt;.cz-config.js&lt;/strong&gt; 文件,根据&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/cz-customizable/cz-config-EXAMPLE.js&lt;/code&gt;配置git cz时弹出的message和对应的输入或者选项。&lt;/p&gt;

&lt;p&gt;如果想要进一步进行配置，直接修改&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/cz-customizable&lt;/code&gt;下的&lt;strong&gt;questions.js&lt;/strong&gt;和&lt;strong&gt;buildCommit.js&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;buildCommit.js中生成最终commit message：
&lt;img src=&quot;https://pictures-1255802956.cos.ap-chengdu.myqcloud.com/BLOG/buildCommit.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;questions.js中message配置部分：
&lt;img src=&quot;https://pictures-1255802956.cos.ap-chengdu.myqcloud.com/BLOG/questions.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>&gt;&gt;&gt;程东平&lt;&lt;&lt;</name><email>dpchengx@gmail.com</email></author><category term="commit-message" /><summary type="html">起因 团队对提交的commit message格式有约定俗称的要求，但是没有一个统一的规范，导致大家提交的commit message或多或少不太一样。因此，需要一个工具来帮助大家统一commit message的格式，也方便后续的分析和拓展。 commitizen commitizen 是一个帮助规范commit message的工具。安装后的效果如下图：</summary></entry></feed>